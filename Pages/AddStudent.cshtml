@page
@model SAMS_IPT102.Pages.AddStudentModel
@{
    ViewData["Title"] = "Add New Student Record";
}

<section class="d-flex align-items-center justify-content-center mt-4 mb-4" style="min-height: calc(100vh - 80px);">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-6">
                <h2 class="text-primary">
                    <a href="/" class="text-decoration-none text-primary">Add New Student Record</a>
                </h2>
                <p>Fill out the form below to add a new student record to our attendance monitoring system.</p>
                <form id="addStudentForm" method="post">
                    <div class="form-group">
                        <label for="rfidNumber">RFID Number (Tap their IDs):</label>
                        <input type="text" id="rfidNumber" name="rfid_number" class="form-control mb-2" required>
                    </div>
                    <div class="form-group">
                        <label for="studentNumber">Student Number:</label>
                        <input type="text" id="studentNumber" name="student_number" class="form-control mb-2" placeholder="ex: YY-0000" required>
                    </div>
                    <div class="form-group">
                        <label for="enrollmentYear">Enrollment Year (Auto-fill from Student Number):</label>
                        <input type="number" id="enrollmentYear" name="enrollment_year" class="form-control mb-2" required readonly>
                    </div>
                    <div class="form-group">
                        <label for="firstName">First Name:</label>
                        <input type="text" id="firstName" name="first_name" class="form-control mb-2" required>
                    </div>
                    <div class="form-group">
                        <label for="middleName">Middle Name:</label>
                        <input type="text" id="middleName" name="middle_name" class="form-control mb-2">
                    </div>
                    <div class="form-group">
                        <label for="lastName">Last Name:</label>
                        <input type="text" id="lastName" name="last_name" class="form-control mb-2" required>
                    </div>
                    <div class="form-group">
                        <label for="gender">Gender:</label>
                        <select id="gender" name="Gender" class="form-control mb-2" required>
                            <option value="">Select Gender</option>
                            <option value="Male">Male</option>
                            <option value="Female">Female</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="dateOfBirth">Date of Birth:</label>
                        <input type="date" id="dateOfBirth" name="date_of_birth" class="form-control mb-2">
                    </div>
                    <div class="form-group">
                        <label for="studentAge">Age:</label>
                        <input type="number" id="studentAge" name="age" class="form-control mb-2">
                    </div>
                    <div class="form-group">
                        <label for="phoneNumber">Phone Number (+63):</label>
                        <input type="number" id="phoneNumber" name="phone_number" placeholder="ex: (+63)" class="form-control mb-2">
                    </div>
                    <div class="form-group">
                        <label for="department">Department:</label>
                        <select id="department" name="department" class="form-control mb-2" required>
                            <option value="">Select Department</option>
                            <option value="College of Education">College of Education</option>
                            <option value="College of Engineering">College of Engineering</option>
                            <option value="College of Computer Studies">College of Computer Studies</option>
                            <option value="College of Business Administration and Accountancy">College of Business Administration and Accountancy</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="course">Course:</label>
                        <select id="course" name="course" class="form-control mb-2" required disabled>
                            <option value="">Select Course</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="currentYear">Current Year:</label>
                        <select id="currentYear" name="current_year" class="form-control mb-2" required disabled>
                            <option value="">Select Year</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="currentSection">Current Section:</label>
                        <input type="text" id="currentSection" name="current_section" class="form-control mb-2" required>
                    </div>
                    <div class="form-group">
                        <label for="studentType">Student Type:</label>
                        <select id="studentType" name="student_type" class="form-control mb-2" required>
                            <option value="">Select Type</option>
                            <option value="Regular">Regular</option>
                            <option value="Irregular">Irregular</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="studentCampus">Student Campus:</label>
                        <select id="studentCampus" name="student_campus" class="form-control mb-2" required>
                            <option value="" selected>Please specify:</option>
                            <option value="Batasan Campus">Batasan Campus</option>
                            <option value="San Francisco Campus">San Francisco Campus</option>
                            <option value="San Bartolome Campus">San Bartolome Campus</option>
                        </select>
                    </div>


                    <!-- Button to open the Confirmation Modal -->
                    <button type="button" class="btn btn-primary w-100 mt-3" data-bs-toggle="modal" data-bs-target="#confirmAddStudentModal">Add Student</button>
                    
                    <!-- Confirmation Modal -->
                    <div class="modal fade" id="confirmAddStudentModal" tabindex="-1" aria-labelledby="confirmAddStudentModalLabel" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="confirmAddStudentModalLabel">Confirm Action</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body">
                                    Are you sure you want to add this student record?
                                </div>
                                <div class="modal-footer">
                                    <!-- Cancel Button to Close Modal -->
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                    <!-- Submit Button to Confirm Submission -->
                                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal" onclick="submitForm()">Confirm</button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Loading Modal with Spinner -->
                    <div class="modal fade" id="loadingModal" tabindex="-1" aria-labelledby="loadingModalLabel" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
                        <div class="modal-dialog modal-dialog-centered">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="loadingModalLabel">Please Wait</h5>
                                </div>
                                <div class="modal-body text-center">
                                    <div class="spinner-border text-primary mt-3" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                    <p class="mt-2">Processing...</p>
                                </div>
                            </div>
                        </div>
                    </div>

                </form>
            </div>
        </div>
    </div>
</section>

<script>
    // Function to submit form after confirmation
    function submitForm() {
        // Trigger form submission
        document.getElementById("addStudentForm").submit();
    }

    document.addEventListener('DOMContentLoaded', function () {

        document.getElementById("rfidNumber").addEventListener("keydown", function (e) {
            let rfidNumber = this.value;
            let key = e.key;

            // Allow only numeric keys (0-9) and some control keys (Backspace, Tab, ArrowLeft, ArrowRight)
            if (!/^[0-9]$/.test(key) && key !== 'Backspace' && key !== 'Tab' && key !== 'ArrowLeft' && key !== 'ArrowRight') {
                e.preventDefault();  // Prevent non-numeric characters and keys
            } else if (rfidNumber.length >= 10 && /^[0-9]$/.test(key)) {
                // Prevent input when the length is already 11 digits
                e.preventDefault();
            }
        });

        // Function to convert the input to uppercase
        function convertToUpperCase(input) {
            input.value = input.value.toUpperCase();  // Convert the value to uppercase
        }

        // Add the input event listener for the name fields
        document.getElementById("firstName").addEventListener("input", function () {
            convertToUpperCase(this);
        });

        document.getElementById("middleName").addEventListener("input", function () {
            convertToUpperCase(this);
        });

        document.getElementById("lastName").addEventListener("input", function () {
            convertToUpperCase(this);
        });

        // Date of Birth validation: auto-fill the Age field (readonly) when the date is specified
        document.getElementById("dateOfBirth").addEventListener("change", function () {
            let dob = new Date(this.value);
            let ageField = document.getElementById("studentAge");

            if (dob && !isNaN(dob)) {
                let today = new Date();
                let age = today.getFullYear() - dob.getFullYear();
                let m = today.getMonth() - dob.getMonth();
                if (m < 0 || (m === 0 && today.getDate() < dob.getDate())) {
                    age--;
                }
                // Automatically fill the Age field and ensure it's readonly
                ageField.value = age;
            }
        });

        // Current Section: Ensure uppercase (use keydown to change input to uppercase in real-time)
        document.getElementById("currentSection").addEventListener("keydown", function (e) {
            let key = e.key;
            // Allow letters and prevent inputting numbers or special characters
            if (/[a-zA-Z]/.test(key)) {
                this.value = this.value.toUpperCase();
            }
        });

        // Phone number validation: Only accept numbers (using RegEx) and max 11 digits (keydown event)
        document.getElementById("phoneNumber").addEventListener("keydown", function (e) {
            let phoneNumber = this.value;
            let key = e.key;
            // Allow numeric characters, backspace, arrow keys, and prevent more than 11 digits
            if (!/^[0-9]$/.test(key) && key !== 'Backspace' && key !== 'ArrowLeft' && key !== 'ArrowRight') {
                e.preventDefault();  // Prevent non-numeric characters
            } else if (phoneNumber.length >= 10 && /^[0-9]$/.test(key)) {
                e.preventDefault();  // Prevent more than 11 digits
            }
        });

        document.getElementById("studentNumber").addEventListener("input", function () {
            let studentNumber = this.value;
            let enrollmentYearField = document.getElementById("enrollmentYear");
            let currentYearField = document.getElementById("currentYear");

            // Regex to match the format "YY-0000"
            let regex = /^(\d{2})-(\d{4})$/;

            // Validate the input format and update enrollmentYear and currentYear fields
            if (regex.test(studentNumber)) {
                let yearPrefix = studentNumber.match(regex)[1];
                let currentYear = new Date().getFullYear();

                // Calculate the full enrollment year based on the student number prefix
                let enrollmentYear = (parseInt(yearPrefix) <= parseInt(currentYear.toString().slice(-2)))
                    ? "20" + yearPrefix
                    : "19" + yearPrefix;

                enrollmentYearField.value = enrollmentYear;  // Update enrollment year
                enrollmentYearField.readOnly = true;  // Optionally disable editing of enrollment year

                // Set the current year (it can be changed by the user later)
                currentYearField.value = enrollmentYear;  // Set the current year to match enrollment year by default
                currentYearField.disabled = false;  // Enable the current year field
            } else {
                // If the input is invalid, disable the current year field
                currentYearField.disabled = true;
                enrollmentYearField.value = ''; // Optionally clear the enrollment year field
            }
        });

        document.getElementById("studentNumber").addEventListener("keydown", function (e) {
            let studentNumber = this.value;
            let key = e.key;

            // Allow Backspace, Arrow keys (Left, Right), and Tab
            if (key === 'Backspace' || key === 'ArrowLeft' || key === 'ArrowRight' || key === 'Tab') {
                return;  // Allow these keys to proceed
            }

            // Format: 00-0000 (allow numbers, backspace, and dash only)
            let regex = /^\d{2}-\d{0,4}$/;  // Allow max of 7 characters (2+1+4)

            // Prevent any character other than numbers or dash
            if (!/^\d$/.test(key) && key !== '-') {
                e.preventDefault();  // Prevent non-numeric and non-dash characters
            }

            // Prevent exceeding the max length (7 characters)
            if (studentNumber.length >= 7 && /^[0-9]$/.test(key)) {
                e.preventDefault();  // Prevent exceeding 7 characters
            }

            // Allow the dash only after the second character (00-0000 format)
            if (studentNumber.length === 2 && key !== '-') {
                e.preventDefault();
            }

            // Allow Backspace to remove the last character
            if (key === 'Backspace' && studentNumber.length <= 3) {
                // Allow deletion of the dash if it's at position 3
                if (studentNumber.length === 3) {
                    this.value = studentNumber.slice(0, -1);  // Remove dash
                }
            }
        });


        // Department and course mapping
        const courseYearMapping = {
            "College of Education": {
                "Bachelor of Early Childhood Education (BECEd)": ["1st Year", "2nd Year", "3rd Year", "4th Year"]
            },
            "College of Business Administration and Accountancy": {
                "BSA": ["1st Year", "2nd Year", "3rd Year", "4th Year"],
                "BS Entrep": ["1st Year", "2nd Year", "3rd Year"]
            },
            "College of Engineering": {
                "BSIE": ["1st Year", "2nd Year", "3rd Year", "4th Year"],
                "BSECE": ["1st Year", "2nd Year", "3rd Year", "4th Year"]
            },
            "College of Computer Studies": {
                "BSIT": ["1st Year", "2nd Year", "3rd Year", "4th Year"]
            }
        };

        // Populate the courses and current year based on selected department and course
        const departmentSelect = document.getElementById('department');
        const courseSelect = document.getElementById('course');
        const currentYearSelect = document.getElementById('currentYear');

        departmentSelect.addEventListener('change', function () {
            const selectedDepartment = this.value;

            // Reset courses and current year dropdowns
            courseSelect.innerHTML = '<option value="">Select Course</option>';
            courseSelect.disabled = true;
            currentYearSelect.innerHTML = '<option value="">Select Year</option>';
            currentYearSelect.disabled = true;

            // Populate the courses for the selected department
            if (selectedDepartment && courseYearMapping[selectedDepartment]) {
                Object.keys(courseYearMapping[selectedDepartment]).forEach(course => {
                    const option = document.createElement('option');
                    option.value = course;
                    option.textContent = course;
                    courseSelect.appendChild(option);
                });
                courseSelect.disabled = false;
            }
        });

        // Populate the current years when the course changes
        courseSelect.addEventListener('change', function () {
            const selectedDepartment = departmentSelect.value;
            const selectedCourse = this.value;

            currentYearSelect.innerHTML = '<option value="">Select Year</option>';
            currentYearSelect.disabled = true;

            if (selectedCourse && courseYearMapping[selectedDepartment][selectedCourse]) {
                courseYearMapping[selectedDepartment][selectedCourse].forEach(year => {
                    const option = document.createElement('option');
                    option.value = year;
                    option.textContent = year;
                    currentYearSelect.appendChild(option);
                });
                currentYearSelect.disabled = false;
            }
        });

    });
</script>